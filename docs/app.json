[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(ggplot2)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(theme = shinytheme(\"superhero\"),\n                tags$head(tags$title(\"Painel de derivadas do NIPE\")),\n                #mainPanel(\"Núcleo Integrado de Pesquisa Econômica \\n Painel de derivadas\"),\n                titlePanel(\n                  h1(\"Núcleo Integrado de Pesquisa Econômica: \\n Explicando a derivada\", align = \"center\")\n                ),\n                \n                # Application title\n                titlePanel(\"Domínio\"),\n                \n                # Sidebar with a slider input for number of bins \n                sidebarLayout(\n                  sidebarPanel(\n                    sliderInput(\"inferior\", \"Limite inferior:\", -100, min = -100, max = 0), \n                    sliderInput(\"superior\", \"Limite superior:\", 100, min = 0.1, max = 100),\n                    sliderInput(\"x\", label = \"Indique o valor de x\", min = -100, max = 100, value = 0),\n                    textInput(inputId = \"funcao\", label = \"Informe a função\", value = parse(text = \"2*x^2\"))\n                  ),\n                  \n                  # Show a plot of the generated distribution\n                  mainPanel(\n                    plotOutput(\"grafico1\"), textOutput(\"derivada\"), textOutput(\"xvalue\"), textOutput(\"inclinacao\")\n                  )\n                )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output, session) {\n  \n  observeEvent(input$funcao, {\n    output$grafico1  <- renderPlot({\n      fc = expression(input$funcao)\n      f = function(x){return(eval(parse(text = fc)))}\n      xx = c()\n      yy = c()\n      \n      for(i in input$inferior:input$superior){\n        xx[i - input$inferior + 1] = i\n        yy[i - input$inferior + 1] = f(i)\n        yy[i - input$inferior + 1] = eval(parse(text = yy[i - input$inferior + 1] ), envir=list(x=i))\n      }\n      deriv = D(parse(text = input$funcao), \"x\")\n      # \n      if(is.numeric(deriv) == FALSE){\n        flx = eval(deriv, envir=list(x=input$x))\n      }else{\n        flx = deriv\n      }\n      \n      fx = eval(parse(text = f(input$x)), envir=list(x=input$x))\n      xstar = input$x\n      tangente = function(x){fx - flx*xstar + flx*x}\n      \n      \n      plot(x = xx, y = yy, col = 'blue',  type = \"l\", xlab = \"x\", ylab = \"f(x)\", lwd = 3.5, main = \"Representação da derivada\")\n      points(x = input$x, y = tangente(input$x), col = \"black\")\n      #    par(new = TRUE)\n      if(input$x %in% -1:-5){\n        lines(x = (input$x - 4*input$x):(input$x+4*input$x), y = tangente((input$x - 4*input$x):(input$x+4*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x %in% -5:-10){\n        lines(x = (input$x - 1.75*input$x):(input$x+1.75*input$x), y = tangente((input$x - 1.75*input$x):(input$x+1.75*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x ==0){\n        lines(x = -25:25, y = tangente(-25:25), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x %in% 1:5){\n        lines(x = (input$x - 4*input$x):(input$x+4*input$x), y = tangente((input$x - 4*input$x):(input$x+4*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x %in% 5:10){\n        lines(x = (input$x - 1.75*input$x):(input$x+1.75*input$x), y = tangente((input$x - 1.75*input$x):(input$x+1.75*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x %in% 10:35){\n        lines(x = (input$x - 1.25*input$x):(input$x+1.25*input$x), y = tangente((input$x - 1.25*input$x):(input$x+1.25*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x > 35){\n        lines(x = (input$x - 0.5*input$x):(input$x+0.5*input$x), y = tangente((input$x - 0.5*input$x):(input$x+0.5*input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }else if(input$x >10){\n        lines(x = (input$x - 0.5*input$x):(input$x+0.65*input$x), y = tangente((input$x - 0.65*input$x):(input$x+0.65*input$x)), type = \"l\",lwd = 3.5, col = \"yellow\")\n      }else{\n        lines(x = (input$x - input$x):(input$x+input$x), y = tangente((input$x - input$x):(input$x+input$x)), type = \"l\", lwd = 3.5, col = \"red\")\n      }\n      legend(\"top\", legend=c(\"f(x)\", \"f'(x)\"),\n             col=c(\"blue\", \"red\"), lty=1:2, cex=0.8)\n      \n    })\n  })\n  \n  \n  output$derivada = renderPrint({\n    deriv = D(parse(text = input$funcao), \"x\")\n    cat(\"A derivada da função é: f1(x) = \")\n    print(deriv) \n  })\n  \n  output$xvalue = renderPrint({\n    cat(sprintf(\"Valor de x: %i\", input$x))\n  })\n  \n  output$inclinacao = renderPrint({\n    deriv = D(parse(text = input$funcao), \"x\")\n    if(is.numeric(deriv) == FALSE){\n      flx = eval(deriv, envir=list(x=input$x))\n    }else{\n      flx = deriv\n    }\n    if(is.integer(flx) ==TRUE){\n      cat(sprintf(\"Inclinação = %i\", eval(deriv, envir=list(x=input$x)) ))\n    }else{\n      cat(sprintf(\"Coeficiente de Inclinação = %0.2f\", eval(deriv, envir=list(x=input$x))))\n    }\n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"Derivate_Viewer.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
